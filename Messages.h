// Stop!  Do not modify this file as it was auto-generated by gen_code.py

#ifndef MESS_AGES
#define MESS_AGES


class MessageBuffer {
public:
	char * buf;
	size_t size;
	MessageBuffer(char *, int);
	~MessageBuffer();
};


#pragma pack(push, 1)

class Header {
protected:
	struct {
		/* frame */
		uint16_t size;
		uint16_t protocol:12;
		uint8_t  addressable:1;
		uint8_t  tagged:1;
		uint8_t  origin:2;
		uint32_t source;
		/* frame address */
		uint8_t  target[8];
		uint8_t  reserved[6];
		uint8_t  res_required:1;
		uint8_t  ack_required:1;
		uint8_t  :6;
		uint8_t  sequence;
		/* protocol header */
		uint64_t :64;
		uint16_t type;
		uint16_t :16;
		/* variable length payload follows */
	} head;
public:
	Header();
	Header(char *);
	int getType();
	static Header deserialize(int);
	virtual MessageBuffer * makeBuffer();
	virtual void printEverything();
};

// ~~~ Subclasses ~~~
class GetService: public Header {
public:
	GetService();
	GetService(char *);
};


class StateService: public Header {
	struct {
		uint8_t  service;
		uint32_t port;
	} payload;
public:
	StateService(uint8_t, uint32_t);
	StateService(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class GetHostInfo: public Header {
public:
	GetHostInfo();
	GetHostInfo(char *);
};


class StateHostInfo: public Header {
	struct {
		float    signal;
		uint32_t tx;
		uint32_t rx;
		short    :16;
	} payload;
public:
	StateHostInfo(float, uint32_t, uint32_t);
	StateHostInfo(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class GetHostFirmware: public Header {
public:
	GetHostFirmware();
	GetHostFirmware(char *);
};


class StateHostFirmware: public Header {
	struct {
		uint64_t build;
		uint64_t :64;
		uint32_t version;
	} payload;
public:
	StateHostFirmware(uint64_t, uint32_t);
	StateHostFirmware(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class GetWifiInfo: public Header {
public:
	GetWifiInfo();
	GetWifiInfo(char *);
};


class StateWifiInfo: public Header {
	struct {
		float    signal;
		uint32_t tx;
		uint32_t rx;
		short    :16;
	} payload;
public:
	StateWifiInfo(float, uint32_t, uint32_t);
	StateWifiInfo(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class GetWifiFirmware: public Header {
public:
	GetWifiFirmware();
	GetWifiFirmware(char *);
};


class StateWifiFirmware: public Header {
	struct {
		uint64_t build;
		uint64_t :64;
		uint32_t version;
	} payload;
public:
	StateWifiFirmware(uint64_t, uint32_t);
	StateWifiFirmware(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class GetPower: public Header {
public:
	GetPower();
	GetPower(char *);
};


class SetPower: public Header {
	struct {
		uint16_t level;
	} payload;
public:
	SetPower(uint16_t);
	SetPower(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class StatePower: public Header {
	struct {
		uint16_t level;
	} payload;
public:
	StatePower(uint16_t);
	StatePower(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class GetLabel: public Header {
public:
	GetLabel();
	GetLabel(char *);
};


class SetLabel: public Header {
	struct {
	} payload;
public:
	SetLabel();
	SetLabel(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class StateLabel: public Header {
	struct {
	} payload;
public:
	StateLabel();
	StateLabel(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class GetVersion: public Header {
public:
	GetVersion();
	GetVersion(char *);
};


class StateVersion: public Header {
	struct {
		uint32_t vendor;
		uint32_t product;
		uint32_t version;
	} payload;
public:
	StateVersion(uint32_t, uint32_t, uint32_t);
	StateVersion(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class GetInfo: public Header {
public:
	GetInfo();
	GetInfo(char *);
};


class StateInfo: public Header {
	struct {
		uint64_t time;
		uint64_t uptime;
		uint64_t downtime;
	} payload;
public:
	StateInfo(uint64_t, uint64_t, uint64_t);
	StateInfo(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class Acknowledgement: public Header {
public:
	Acknowledgement();
	Acknowledgement(char *);
};


class GetLocation: public Header {
public:
	GetLocation();
	GetLocation(char *);
};


class StateLocation: public Header {
	struct {
	} payload;
public:
	StateLocation();
	StateLocation(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class GetGroup: public Header {
public:
	GetGroup();
	GetGroup(char *);
};


class StateGroup: public Header {
	struct {
	} payload;
public:
	StateGroup();
	StateGroup(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class EchoRequest: public Header {
	struct {
		char payload[64];
	} payload;
public:
	EchoRequest(char);
	EchoRequest(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class EchoResponse: public Header {
	struct {
		char payload[64];
	} payload;
public:
	EchoResponse(char);
	EchoResponse(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class Get: public Header {
public:
	Get();
	Get(char *);
};


class SetColor: public Header {
	struct {
		uint8_t  :8;
		uint16_t hue;
		uint16_t saturation;
		uint16_t brightness;
		uint16_t kelvin;
		uint32_t duration;
	} payload;
public:
	SetColor(uint16_t, uint16_t, uint16_t, uint16_t, uint32_t);
	SetColor(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class State: public Header {
	struct {
		uint16_t hue;
		uint16_t saturation;
		uint16_t brightness;
		uint16_t kelvin;
		short    :16;
		uint16_t power;
		char label[32];
		uint64_t :64;
	} payload;
public:
	State(uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, char);
	State(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class GetPower_Light: public Header {
public:
	GetPower_Light();
	GetPower_Light(char *);
};


class SetPower_Light: public Header {
	struct {
		uint16_t level;
		uint32_t duration;
	} payload;
public:
	SetPower_Light(uint16_t, uint32_t);
	SetPower_Light(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};


class StatePower_Light: public Header {
	struct {
		uint16_t level;
	} payload;
public:
	StatePower_Light(uint16_t);
	StatePower_Light(char *);
	MessageBuffer * makeBuffer();
	void printEverything();
};




#pragma pack(pop)

#endif